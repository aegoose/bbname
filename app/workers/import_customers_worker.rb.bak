# 客户导入处理
class ImportCustomersWorker
  include Sidekiq::Worker
  sidekiq_options retry: false, queue: :critical, backtrace: 5

  @@dists = {}
  @@jobs = {}

  def job_key
    "#{@log_id}"
  end

  # def ts
  #   "[#{Time.now.strftime('%Y-%m-%d %H:%I')}] "
  # end

  # worker处理函数
  def perform(log_id)
    # Do something
    # 读数数，获取得文件
    # 读文件
    # 启动导入
    #
    @log_id = log_id

    admlog = AdminLog.find_by_id(@log_id)

    # FIXME: 存在，并且redis不存在，则执行

    if admlog.blank?
      logger.warn "[#{job_key}] 导入失败，#{job_key}为空记录, 不存在"
      return
    end

    # FIXME

    admfile = admlog.attachment.attachment.file
    unless admfile.exists?
      logger.warn "[#{job_key}] 导入失败，找不到导入数据的文件: #{admfile.path}"
      return
    end

    jtime = @@jobs[@log_id ]
    ntime = Time.now.to_i
    if jtime && ntime - jtime < 3600 # 未超过1个小时
      logger.warn "[#{job_key}] 任务已存，无需要得复导入"
      return
    end

    @@jobs[@log_id ] = ntime
    import(admfile, admlog)
    @@jobs.delete(@log_id )
  end

  private

  # 按产品经理的导入处理过程
  def import(file, admlog)

    spreadsheet = Roo::Spreadsheet.open(file.path, { csv_options: { encoding: Encoding::GB2312 } })# open_spreadsheet(file)
    h_num = 1
    header = spreadsheet.row(1)

    if header.length != 15
      admlog.add_fail_msg!(0, "导入权限有误, 导入文档格式不正确！")
      logger.error "[#{job_key}] 导入文档格式不正确(#{header&.join(',')})"
      return
    end

    # 去掉多少行数据
    if (h1 =header.reject(&:blank?)).length == 1
      h2 = spreadsheet.row(2)
      h3 = spreadsheet.row(3)
      header = header.length.times.map do |i|
        a = h2[i]
        a = h3[i] if h3[i].blank?
        a
      end
      h_num = 3
    end

    # 镇区  网点  网点机构号 居民姓名  性别  证件号 联系电话  小区/村名 联系地址  卡号  定期  保险  理财  其他标签  所属客户经理

    last_row = spreadsheet.last_row
    done, total, succs, fails = admlog.process_array
    total = last_row - h_num
    begin_row = done + h_num

    if done >= total
      logger.info "[#{job_key}] 导入处理已完成：done:#{done}, total:#{total}, succs:#{succs}, fails:#{fails}, begin_row:#{begin_row}, last_row:#{last_row}"
      admlog.update_attribute(:status, :done)
      return
    end

    curr_adm = admlog.admin
    if curr_adm.blank?
      admlog.add_fail_msg!(done, '导入权限有误, 找不到当前导入人！', :error)
      logger.error "[#{job_key}] 导入权限有误, 找不到导入人(#{admlog.to_json})"
      return
    end

    # 是否是产品经理的导入，若不是，则表示
    by_manager = curr_adm.manager? ? true : false

    admlog.ctrl_at = Time.now
    # admlog.update_fail_result('')

    imp_cus = {}

    (begin_row..last_row).each do |i|
      row = spreadsheet.row(i)
      begin
        cus, err_str = ImportUtil.import_cus_by_row!(by_manager, curr_adm, admlog, row)
        if err_str.blank?
          logger.warn "[#{job_key}] 第#{done}条记录导入成功, 记录为#{row}"
        else
          logger.info "[#{job_key}] 第#{done}条记录导入成功，但产品有误[#{err_str}], 记录为#{row}"
        end
        succs += 1
        if cus && imp_cus.key?(cus.name)
          admlog.append_fail_msg(done, row, '导入重复并覆盖记录', :warning)
        else
          admlog.append_fail_msg(done, row, '导入成功', :debug)
        end

        imp_cus[cus.name] = 1

      rescue => e
        fails += 1
        admlog.append_fail_msg(done, row, e.message, :error)
        logger.warn "[#{job_key}] 第#{done}条记录导入失败(#{e.message}), 记录为#{row}, error: #{e.backtrace[0..5].join('========')}"
      end
      admlog.up_process(done, total, succs, fails)
      admlog.save #
      done += 1
      # sleep(1.0)
    end

    admlog.append_result("上传处理完成, #{admlog.process_msg}", :info)
    admlog.status = :done
    admlog.save # 全局保存
  end

  # def import_cus_row!(curr_adm, row)
  #   # row = Hash[[header, spreadsheet.row(i)].transpose]
  #   distinct_cn = row[0]&.strip # 镇区
  #   branch_cn = row[1]&.strip # 网点
  #   branch_id = row[2]&.strip # 网点机构号
  #   cname = row[3]&.strip # 居民姓名
  #   sex_cn = row[4]&.strip # 性别
  #   idcard = row[5]&.strip # 证件号
  #   tel = get_tel(row[6]) # 联系电话
  #   area_zone = row[7]&.strip # 小区/村名
  #   addr = row[8]&.strip # 联系地址
  #   card_no = row[9]&.strip # 卡号
  #   fix_cn = row[10]&.strip # 定期
  #   insure_cn = row[11]&.strip # 保险
  #   financial_cn = row[12]&.strip # 理财
  #   tags = row[13]&.strip || '' # 其他标签， 如“a,b,c”
  #   adm_cn = row[14]&.strip # 所属客户经理, 客户经理名字

  #   # logger.info(row)

  #   raise "导入人[#{curr_adm.name}]与客户经理[#{adm_cn}]不匹配" if curr_adm.name != adm_cn

  #   dist_id = get_dist(distinct_cn)
  #   branch = ImportUtil.get_branch(dist_id, branch_id, branch_cn)
  #   raise "找不到网点信息(#{distinct_cn}/#{branch_cn})" if branch.blank?

  #   cus = ImportUtil.get_customer(cname, tel)
  #   raise "找不到客户信息(#{cname}/#{tel})" if cus.blank?
  #   cus.branch = branch
  #   cus.distinct_id = dist_id
  #   cus.manager = curr_adm

  #   idcardno, birth, gender = ImportUtil.get_id_card(idcard, sex_cn)
  #   raise "身份证(#{idcard})格式不正确" if idcardno.blank?
  #   cus.id_card = idcardno unless idcardno.blank?
  #   cus.birthday = birth.to_date unless birth.blank?
  #   cus.sex = gender unless gender.blank?

  #   cus.area_zone = area_zone unless area_zone.blank?
  #   cus.address = addr unless addr.blank?
  #   cus.load_last_card(card_no) # 加载卡号
  #   p_errs = ImportUtil.load_products(cus, fix_cn, insure_cn, financial_cn)
  #   cus.tags = tags.split(',').join(' ') unless tags.blank?

  #   # 日志
  #   cus.last_import = admlog

  #   # FIXME: 当更新customer的时候，last_xxx没有被更新上
  #   isok = cus.save
  #   unless isok
  #     unless cus.errors.messages.blank?
  #       p_errs << cus.errors.messages.map { |k, v| "#{k}#{v[0]}" }.join(',')
  #     end
  #     unless cus.last_fix&.errors.messages.blank?
  #       p_errs << cus.last_fix.errors.messages.map { |k, v| "#{k}#{v[0]}" }.join(',')
  #     end
  #     unless cus.last_insure&.errors.messages.blank?
  #       p_errs << cus.last_insure.errors.messages.map { |k, v| "#{k}#{v[0]}" }.join(',')
  #     end
  #     unless cus.last_financial&.errors.messages.blank?
  #       p_errs << cus.last_financial.errors.messages.map { |k, v| "#{k}#{v[0]}" }.join(',')
  #     end

  #     p_errs = ['保存客户到数据库出错'] if p_errs.blank?
  #     raise p_errs.join(',')
  #   end

  #   cus
  # end

  # def get_tel(tel)
  #   "#{tel&.to_i}"
  # end

  # # 解析距离
  # def get_dist(dist_cn)
  #   ImportUtil.get_dg_dist(dist_cn)
  # end

  # # 解析网点信息
  # def get_branch(dist_id, brid, brcn)
  #   br = Branch.find_by_branch_no(brid.to_i)
  #   br = Branch.find_by_name(brcn) if br.blank?
  #   br = Branch.create(distinct_id: dist_id, name: brcn, branch_no: brid) if br.blank?
  #   br
  # end

  # # 解析身份证号及生日/性别
  # def get_id_card(card_no, sex)
  #   # 地区码  生日     顺序号 校验码
  #   # xxxxxx yyyyMMDD xxx X
  #   # 男=顺序码奇数， 女=顺序码偶数
  #   # 校验码：1-10, 10=X
  #   #
  #   idcard = nil
  #   birthday = nil
  #   gender = nil
  #   if IdCardUtil.check_id_card(card_no)
  #     gender, birthday = IdCardUtil.get_id_card_info(card_no)
  #     idcard = card_no
  #     # birthday = birthday.to_date
  #   end

  #   (gender = (sex == '男' ? :boy : :girl)) unless sex.blank?

  #   [idcard, birthday, gender]
  # end

  # def load_products(cus, fix_cn, insure_cn, financial_cn)
  #   # 格式：
  #   #   yyyy-mm-dd,x[年|月|日|天],x.x万
  #   #   yyyy-mm-dd,yyyy-mm-dd,x.x万
  #   # 举例：
  #   #   2017-8-1,4年,5万
  #   #   2017-8-1,180天,4.5万
  #   #
  #   reg2 = /^(\d{4}-\d{1,2}-\d{1,2}),((\d+)([年|月|日|天])|(\d{4}-\d{1,2}-\d{1,2}))(,(\d+(\.\d+)?)万)?$/i
  #   msges = []

  #   { fix: fix_cn, insure: insure_cn, financial: financial_cn }.each do |kty, vproduct|
  #     arr = reg2.match(vproduct)

  #     if arr.blank? # 匹配失败则不加载商品
  #       msges << "#{kty}的产品#{vproduct}格式不符"
  #       next
  #     end

  #     sdate = arr[1]
  #     edate = arr[5]
  #     pnum = arr[3].to_i
  #     ptype_cn = arr[4]
  #     money = arr[7].to_f # 万为单位

  #     classify = kty.to_sym
  #     attrs = CustomerProduct.parse_attrs(sdate, edate, ptype_cn, pnum, money)
  #     pp = cus.products.product_at(classify, attrs[:begin_at.to_s], attrs[:end_at.to_s]).first

  #     if pp.blank?
  #       attrs['classify'] = classify
  #       pp = cus.products.new(attrs)
  #     else
  #       pp.attributes = attrs.compact
  #     end
  #     logger.warn "--#{classify}--#{kty}-#{sdate}, #{edate}, #{pnum}, #{ptype_cn}, #{money} -#{attrs} ---#{pp}---"
  #     pp.branch = cus.branch if pp.branch_id.blank?
  #     pp.manager = cus.manager if pp.admin_id.blank?

  #     case classify
  #     when :fix
  #       cus.last_fix = pp
  #     when :insure
  #       cus.last_insure = pp
  #     when :financial
  #       cus.last_financial = pp
  #     end
  #   end

  #   msges
  # end

  # def get_customer(cname, tel)
  #   return nil if cname.blank?

  #   cus = Customer.find_by_name(cname)

  #   cus = Customer.find_by_tel(tel) if cus.blank?

  #   cus = Customer.new(name: cname) if cus.blank?

  #   cus.tel = tel unless tel.blank?
  #   cus.name = cname

  #   cus
  # end
end
