module Backend
  class BranchesController < Backend::ApplicationController
    respond_to :html, :json
    before_action :set_branch, only: [:show, :edit, :update, :destroy]

    add_breadcrumb I18n.t('navs.backend.branches'), :backend_branches_path

    # GET /branches
    # GET /branches.json
    def index
      add_breadcrumb I18n.t('navs.backend.branches_index'), :backend_branches_path

      @branches = Branch.all
    end

    # GET /branches/1
    # GET /branches/1.json
    def show
    end

    # GET /branches/new
    def new
      @branch = Branch.new
      respond_modal_with @branch
    end

    # GET /branches/1/edit
    def edit
      respond_modal_with @branch
    end

    # POST /branches
    # POST /branches.json
    def create
      update
    end

    # PATCH/PUT /branches/1
    # PATCH/PUT /branches/1.json
    def update
      pam = branch_params
      if @branch.blank?
        @branch = Branch.new(pam)
      else
        @branch.attributes = pam
      end

      isOk = @branch.save

      raise ApiUserErrors::BranchUpdateError.new(@branch.error_messages) unless isOk

      respond_to do |format|
        format.html { redirect_to backend_branches_url, notice: '保存成功!' }
        format.json { render :update }
      end
    end

    # DELETE /branches/1
    # DELETE /branches/1.json
    def destroy
      isOk = @branch.destroy

      raise ApiUserErrors::BranchDeleteError.new(@branch.error_messages) unless isOk

      respond_to do |format|
        format.html { redirect_to backend_branches_url, notice: '删除成功' }
        format.json { render :destroy }
      end
    end

    private
    # Use callbacks to share common setup or constraints between actions.
    def set_branch
      @branch = Branch.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def branch_params
      params.require(:branch).permit(:name, :distinct_id, :branch_no)
    end
  end
end
