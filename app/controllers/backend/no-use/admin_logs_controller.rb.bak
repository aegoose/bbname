module Backend
  class AdminLogsController < Backend::ApplicationController
    respond_to :html, :json

    before_action :set_admin_log, only: [:show, :edit, :update, :destroy]
    add_breadcrumb I18n.t("navs.backend.admin_logs"), :backend_admin_logs_path

    # GET /admin_logs
    # GET /admin_logs.json
    def index
      @qr = params.fetch(:query, {}).permit(:classify, :customer_id)
      @admin_logs = AdminLog.by_query(@qr).page(params[:page])

    end

    # GET /admin_logs/1
    # GET /admin_logs/1.json
    def show
    end

    # GET /admin_logs/new
    def new
      @admin_log = AdminLog.new
    end

    def new_customers
      @admin_log = AdminLog.new(classify: :import)
    end

    # GET /admin_logs/1/edit
    def edit
    end

    # POST /admin_logs
    # POST /admin_logs.json
    def create
      update
    end

    # PATCH/PUT /admin_logs/1
    # PATCH/PUT /admin_logs/1.json
    def update
      update_data
      respond_to do |format|
        format.html { redirect_to backend_admin_logs_url, notice: '保存成功!' }
        format.json { render :update }
      end

    end

    # DELETE /admin_logs/1
    # DELETE /admin_logs/1.json
    def destroy
      @admin_log.destroy
      respond_to do |format|
        format.html { redirect_to backend_admin_logs_url, notice: '删除成功' }
        format.json { head :destroy }
      end
    end

    protected

    def update_data(classify = "")
      pam = admin_log_params

      raise ApiUserErrors::EmptyImportFile.new unless pam[:file]

      if @admin_log.blank?
        @admin_log = AdminLog.new(pam)
      else
        @admin_log.attributes = pam
      end

      @admin_log.attachment = Attachment.new(:attachment => pam[:file], :attachmentable => @admin_log) if @admin_log.attachment.blank?
      @admin_log.admin = current_admin

      (@admin_log.title = @admin_log.attachment.file_name) if @admin_log.title.blank?
      @admin_log.ctrl_at = Time.now
      # @admin_log.logable = current_admin
      unless classify.blank?
        @admin_log.classify = classify.to_sym
      end

      isOk = @admin_log.save

      # @admin_log.title = "上传#{pam[:file][:original_filename]}"
      raise ApiCustomerErrors::UploadFileError.new(@admin_log.error_messages) unless isOk


    end

    # Use callbacks to share common setup or constraints between actions.
    def set_admin_log
      @admin_log = AdminLog.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def admin_log_params
      params.require(:admin_log).permit(:classify, :title, :file)
    end

  end
end
