module Backend
  class CustomerProductsController < Backend::ApplicationController
    respond_to :html, :json
    before_action :set_customer_product, only: [:show, :edit, :update, :destroy]
    # before_action :authorize_policy

    add_breadcrumb I18n.t('navs.backend.customer_products'), :backend_customer_products_path

    # GET /customer_products
    # GET /customer_products.json
    def index
      add_breadcrumb I18n.t('navs.backend.customer_products_index'), :backend_customer_products_path

      # qr = params[:q] || {}
      qr = params.fetch(:q, {}).permit(:key, :classify, :status, :branch_id, :customer_id, :time_start, :time_stop)
      qr = qr.select{|k,v| {k=>v} unless v.blank? }
      unless (cus_id = params[:customer_id]).blank?
        qr[:customer_id] = cus_id.to_i
      end

      unless (cus_id = qr[:customer_id]).blank?
        @q_cus = Customer.find_by_id(cus_id) || Customer.new
      end

      qkey = qr.delete(:key)
      qstatus = qr.delete(:status) || ''
      classify = qr.delete(:classify)
      qstart = qr.delete(:time_start)
      qstop = qr.delete(:time_stop)

      if qr[:status].blank? && !(st = params[:status]).blank?
        qstatus = st
      end

      q_where = policy_scope(CustomerProduct).by_query(qr)
        .by_key(qkey).classify_at(classify)
        .status_type_at(qstatus).end_between(qstart, qstop)
        .includes(:customer)
      # 按权限
      @customer_products = q_where.page(params[:page])

      qr[:status] = qstatus unless qstatus.blank?
      qr[:key] = qkey unless qkey.blank?
      qr[:classify] = classify unless classify.blank?
      qr[:time_start] = qstart unless qstart.blank?
      qr[:time_stop] = qstop unless qstop.blank?
      # @q = policy_scope(CustomerProduct).ransack(qr)
      @q = qr
    end

    # GET /customer_products/1
    # GET /customer_products/1.json
    def show
      respond_modal_with @customer_product
    end

    # GET /customer_products/new
    def new
      # authorize CustomerProduct

      @customer = Customer.find(params[:customer_id])
      @customer_product = @customer.products.new
      classify = params[:classify]
      @customer_product.classify = classify.to_sym unless classify.blank?
      respond_modal_with @customer_product
    end

    # GET /customer_products/1/edit
    def edit
      respond_modal_with @customer_product
    end

    # POST /customer_products
    # POST /customer_products.json
    def create
      update
    end

    # PATCH/PUT /customer_products/1
    # PATCH/PUT /customer_products/1.json
    def update

      pam = customer_product_params
      if @customer_product.blank?
        @customer_product = CustomerProduct.new(pam)
      else
        @customer_product.attributes = pam
      end
      @customer_product.reset_period

      # puts @customer_product.to_json

      cus = @customer_product.customer
      @customer_product.branch = cus&.branch
      @customer_product.manager = current_admin

      isOk = @customer_product.save

      raise ApiCustomerErrors::CustomerProductUpdateError.new(@customer_product.error_messages) unless isOk

      clsty = @customer_product.classify
      cus.reset_last_product!(@customer_product.classify, @customer_product) if @customer_product.is_bind.replace? || cus.send("#{clsty}_product_id").blank?

      respond_to do |format|
        format.html { redirect_to backend_customer_products_url, notice: '保存成功!' }
        format.json { render :update }
      end

    end

    # DELETE /customer_products/1
    # DELETE /customer_products/1.json
    def destroy
      isOk = @customer_product.destroy

      raise ApiCustomerErrors::CustomerProductDestroyError.new(@customer_product.error_messages) unless isOk

      cus = @customer_product.customer
      cus.reset_last_product_after_destroy_product!(@customer_product)

      respond_to do |format|
        format.html { redirect_to backend_customer_products_url, notice: '删除成功' }
        # format.json { head :destroy }
        format.json { render :destroy }
      end
    end

    private

    # Use callbacks to share common setup or constraints between actions.
    def set_customer_product
      @customer_product = CustomerProduct.find(params[:id])
      # authorize @customer_product
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def customer_product_params
      params.require(:customer_product).permit(:customer_id, :classify, :begin_at, :end_at, :period, :period_type, :money, :income_rate)
    end
  end
end
